(defn isPrime []
  (-> (| (-> (ToFloat) (Math.Sqrt) (Math.Floor) (ToInt) >= .r
             5 >= .f
             true >= .isPrime))
      (| (When (Is 1) (-> false > .isPrime)))
      (| (When
          (-> (IsMore 2) (And) (Math.Mod 2) (Is 0))
          (-> false > .isPrime)))
      (| (When
          (-> (IsMore 3) (And) (Math.Mod 3) (Is 0))
          (-> false > .isPrime)))
      (When
       (-> .isPrime (And) .f (IsLessEqual .r))
       (Repeat
        (-> (When
             (-> (Math.Mod .f) (Is 0))
             (-> false > .isPrime))
            (When
             (-> (| (-> .f (Math.Add 2) >= .g))
                 (Math.Mod .g) (Is 0))
             (-> false > .isPrime))
            .f (Math.Add 6) > .f)
        :Forever true
        :Until (-> .isPrime (Not) (Or) .f (IsMore .r))))
      .isPrime))

(defwire main-wire
  10001 = .limit
  1 >= .count
  1 >= .candidate

  (Repeat
   (-> .candidate (Math.Add 2) > .candidate
       (When (isPrime) (Math.Inc .count)))
   :Forever true
   :Until (-> .count (Is .limit)))

  .candidate (Assert.Is 104743 true)
  (Log "Answer"))

(defmesh root)
(schedule root main-wire)
(run root)
